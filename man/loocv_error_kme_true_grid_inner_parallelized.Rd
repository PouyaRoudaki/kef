% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LOOCV.R
\name{loocv_error_kme_true_grid_inner_parallelized}
\alias{loocv_error_kme_true_grid_inner_parallelized}
\title{Compute LOOCV Errors on a Grid (Parallelized)}
\usage{
loocv_error_kme_true_grid_inner_parallelized(
  centered_kernel_mat_at_sampled,
  sampled_x,
  min_x,
  max_x,
  lambda_hat_grid,
  tau_hat_grid,
  cloud_computing = FALSE
)
}
\arguments{
\item{centered_kernel_mat_at_sampled}{A square matrix (n x n) representing the centered
kernel matrix evaluated at the sampled points, where n is the number of sampled points.}

\item{sampled_x}{A vector of sampled points for which the weights are to be estimated.}

\item{min_x}{A scalar representing the minimum value of the domain.}

\item{max_x}{A scalar representing the maximum value of the domain.}

\item{lambda_hat_grid}{A numeric vector of lambda values for the grid.}

\item{tau_hat_grid}{A numeric vector of tau values for the grid.}

\item{cloud_computing}{Logical; if `TRUE`, all available cores are used for parallelization. Default is `FALSE`.}
}
\value{
A data frame containing:
  - `lambda_hat`: The lambda values from the grid.
  - `tau_hat`: The tau values from the grid.
  - `loocv_err_mean`: The computed jackknife errors mean.
  - `loocv_err_se`: The computed jackknife errors standard error.
}
\description{
This function calculates LOOCV weight errors for a given grid of lambda and tau values using parallelization.
}
\examples{
# Example usage:
lambda_grid <- seq(0.1, 1, by = 0.1)
tau_grid <- seq(0.1, 1, by = 0.1)
sampled_data <- rnorm(100)
grid_points <- seq(-3, 3, length.out = 50)

# Assume kernel matrices are precomputed:
centered_kernel_sampled <- matrix(runif(10000), ncol = 100)
centered_kernel_grid <- matrix(runif(5000), ncol = 50)
self_centered_grid <- matrix(runif(2500), ncol = 50)

result <- loocv_error_kme_true_grid_inner_parallelized(
  centered_kernel_mat_at_sampled = centered_kernel_sampled,
  sampled_x = sampled_data,
  min_x = min(grid_points),
  max_x = max(grid_points),
  lambda_hat_grid = lambda_grid,
  tau_hat_grid = tau_grid,
  cloud_computing = FALSE
)
}
